{"version":3,"sources":["components/PathHeader.js","components/Navigation.js","components/Main.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js","images/placeholder.png"],"names":["PathHeader","className","Navigation","state","useSelector","console","log","Main","useState","initialData","setInitialData","dispatch","useDispatch","useEffect","fetch","then","res","json","data","type","payload","image","Item","Group","Image","size","src","undefined","medium","placeholder","Content","header","description","summary","App","counter","onClick","Boolean","window","location","hostname","match","initialState","info","rootReducer","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"0TAWeA,MARf,WACI,OACI,yBAAKC,UAAU,QACX,mE,eCSGC,MAXf,WACI,IAAMC,EAAQC,aAAa,SAACD,GAAD,OAAWA,KAEtC,OADAE,QAAQC,IAAI,0BAA2BH,GAEnC,yBAAKF,UAAU,cACX,gCAAQ,oCACR,gCAAQ,0C,mCC8BLM,MAnCf,WAAiB,IAAD,EAC0BC,mBAAS,IADnC,mBACLC,EADK,KACQC,EADR,KAENC,EAAWC,cAEjBC,qBAAU,WACRC,MAAM,kEACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJb,QAAQC,IAAI,CAACY,SACbR,EAAeQ,QAElB,IAEHL,qBAAU,WACRF,EAAS,CAACQ,KAAK,UAAWC,QAASX,OAIrC,IAAMY,EAAQjB,aAAa,SAACD,GAAD,OAAWA,EAAMM,YAAYY,SAKxD,OAHAhB,QAAQC,IAAI,uBAAwB,CAACG,gBACrCJ,QAAQC,IAAIG,EAAYY,OAGpB,6BACI,kBAACC,EAAA,EAAKC,MAAN,KACA,kBAACD,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKE,MAAN,CAAYC,KAAK,QAAQC,SAAeC,IAAVN,EAAsBA,EAAMO,OAASC,MACnE,kBAACP,EAAA,EAAKQ,QAAN,CAAcC,OAAO,WAAWC,YAAavB,EAAYwB,c,OCN1DC,MApBf,WAEE,IAAMC,EAAU/B,aAAa,SAACD,GAAD,OAAWA,EAAMgC,WACxCxB,EAAWC,cAEjB,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,MACA,4BAAQA,UAAU,cAChB,oDAEF,kBAAC,EAAD,MACA,wCAAckC,GACd,4BAAQC,QAAS,kBAAKzB,EAAS,CAACQ,KAAK,gBAArC,aACA,4BAAQiB,QAAS,kBAAKzB,EAAS,CAACQ,KAAK,gBAArC,aACA,kBAAC,EAAD,QCVckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCjBAC,EAAe,CACjBP,QAAS,EACTQ,KAAM,eACNX,YAAa,0DACbvB,YAAa,IA0BFmC,MAvBf,WAAmD,IAA9BzC,EAA6B,uDAArBuC,EAAcG,EAAO,uCAE9C,OAAOA,EAAO1B,MACV,IAAK,YACD,OAAO,2BACAhB,GADP,IAEIgC,QAAShC,EAAMgC,QAAU,IAEjC,IAAK,YACD,OAAO,2BACAhC,GADP,IAEIgC,QAAShC,EAAMgC,QAAU,IAEjC,IAAK,UACD,OAAO,2BACAhC,GADP,IAEIM,YAAaoC,EAAOzB,UAE5B,QACI,OAAOjB,ICjBb2C,G,OAAQC,YAAYH,IAE1BI,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,QAGJK,SAASC,eAAe,SFiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,a,mBGzI5BC,EAAOC,QAAU,IAA0B,0C","file":"static/js/main.471b05f7.chunk.js","sourcesContent":["import React from 'react';\nimport './PathHeader.scss';\n\nfunction PathHeader() {\n    return (\n        <div className=\"Path\">\n            <b>Home / Shows / The Powerpuff Girls</b>\n        </div>\n    )\n}\n\nexport default PathHeader\n","import React from 'react';\nimport { useSelector} from 'react-redux';\nimport './Navigation.scss';\n\nfunction Navigation() {\n    const state = useSelector( (state) => state);\n    console.log(\"State from Navigation: \", state);\n    return (\n        <div className=\"Navigation\">\n            <button><b>Main</b></button>\n            <button><b>Episodes</b></button>\n        </div>\n    )\n}\n\nexport default Navigation;\n","import React, { useState, useEffect } from 'react';\nimport { Item } from 'semantic-ui-react';\nimport { useSelector, useDispatch} from 'react-redux';\nimport placeholder from '../images/placeholder.png';\n\nfunction Main() {\n    const [initialData, setInitialData] = useState('');\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n      fetch('http://api.tvmaze.com/singlesearch/shows?q=the-powerpuff-girls')\n        .then(res => res.json())\n        .then(data => {\n          console.log({data});\n          setInitialData(data);\n        });\n    }, []);\n  \n    useEffect(() => {\n      dispatch({type:\"DISPLAY\", payload: initialData})\n    });\n\n    // const initialData = useSelector( (state) => state.initialData);\n    const image = useSelector( (state) => state.initialData.image);\n\n    console.log(\"State from Main.js: \", {initialData});\n    console.log(initialData.image);\n    // console.log(Object.keys(image)[0]);\n    return (\n        <div>\n            <Item.Group>\n            <Item>\n                <Item.Image size='small' src={image !== undefined ? image.medium : placeholder} />\n                <Item.Content header='Cute Dog' description={initialData.summary} />\n            </Item>\n            </Item.Group>\n        </div>\n    )\n}\n\nexport default Main;\n","import React from 'react';\nimport PathHeader from './components/PathHeader';\nimport Navigation from './components/Navigation';\nimport Main from './components/Main';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './App.scss';\n\nfunction App() {\n\n  const counter = useSelector( (state) => state.counter );\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"App\">\n      <PathHeader />\n      <header className=\"App-header\">\n        <h3>The Powerpuff Girls</h3>\n      </header>\n      <Navigation />\n      <h2>Counter: {counter}</h2>\n      <button onClick={()=> dispatch({type:\"INCREMENT\"})}>INCREMENT</button>\n      <button onClick={()=> dispatch({type:\"DECREMENT\"})}>DECREMENT</button>\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nconst initialState = {\n    counter: 0,\n    info: \"Hello World!\",\n    description: \"Not a lot options on the horizon, but you never know...\",\n    initialData: {},\n}\n\nfunction rootReducer(state = initialState, action){\n\n    switch(action.type){\n        case 'INCREMENT':\n            return {  \n                ...state,\n                counter: state.counter + 1,\n             }\n        case 'DECREMENT':\n            return { \n                ...state,\n                counter: state.counter - 1,\n             }\n        case 'DISPLAY':\n            return { \n                ...state,\n                initialData: action.payload,\n             }\n        default:\n            return state;\n    }\n}\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers/rootReducer';\nimport 'semantic-ui-css/semantic.min.css';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/placeholder.d6af9c9e.png\";"],"sourceRoot":""}